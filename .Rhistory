sjPlot::tab_model(modelo0,
show.ci=FALSE,
encoding = "latin9")
sjPlot::tab_model(modelo0,
show.ci=FALSE,
df.method = 'wald',
encoding = "latin9")
sjPlot::tab_model(modelo0,
show.ci=FALSE,
df.method = 'wald',
encoding = "UTF-8")
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
options(scipen = 999)
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
pacman::p_load(sjPlot,
tidyverse,
srvyr,
survey,
magrittr,
remotes)
remotes::install_github("leifeld/texreg")
remotes::install_github("leifeld/texreg", force = T)
datos <- readRDS("../input/data/datos_proc.rds")
datos <- readRDS("input/data/datos_proc.rds")
datos <- readRDS("input/data/data_proc.rds")
names(datos)
sjPlot::view_df(datos,
encoding = 'UTF-8')
modelo0_sin <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
summary(modelo0_sin)
modelo0 <- glm(ing_medio ~ 1,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo0_sin);summary(modelo0)
datos$ing_medio <- as_factor(datos$ing_medio)
modelo0_sin <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
modelo0 <- glm(ing_medio ~ 1,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo0_sin);summary(modelo0)
modelo1 <- glm(ing_medio ~ edad,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
modelo1 <- glm(ing_medio ~ edad,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo1)
modelo1 <- glm(ing_medio ~ edad,
data = datos,
weights = fact_cal_esi,
family = 'quasibinomial')
summary(modelo1)
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo2)
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo2)
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo3)
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
#weights = fact_cal_esi,
family = 'binomial')
summary(modelo3)
modelo3dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
modelo3_dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
rm(modelo3dis)
summary(modelo3_dis)
esi_design <- as_survey_design(datos,
ids = 1,
weights = fact_cal_esi)
modelo5_survey_q <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'quasibinomial',
design = esi_design)
modelo5_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'binomial',
design = esi_design)
summary(modelo5_survey)
View(modelo5_survey)
View(modelo5_survey_q)
modelo5$coefficients
modelo3$coefficients
modelo3$coefficients[2]
modelo3$coefficients[6]
modelo3$coefficients["est_conyugal"]
modelo3$coefficients["est_conyugalSin pareja"]
summary(modelo5_survey$deviance)
summary(modelo5_survey)$deviance
summary(modelo5_survey)$aic
modelo3_survey$fitted.values
modelo3_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'binomial',
design = esi_design)
modelo3_survey_q <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'quasibinomial',
design = esi_design)
modelo3_survey$fitted.values
pacman::p_load(tidyverse,
haven,
dplyr,
car,
sjmisc,
sjlabelled,
forcats)
data <- read_dta("https://www.ine.cl/docs/default-source/encuesta-suplementaria-de-ingresos/bbdd/stata_esi/2020/esi-2020---personas.dta?sfvrsn=7a4b0e2b_4&download=true")
data_p <- data %>%
select(ing_t_t,
edad,
sexo,
est_conyugal,
ciuo08 = b1,
fact_cal_esi)
data_p <- data_p %>%
mutate_at(vars(sexo, est_conyugal, ciuo08), ~(forcats::as_factor(.))) %>%
mutate(est_conyugal = car::recode(.$est_conyugal,
recodes = c("c('Casado/a', 'Soltero/a', 'Viudo/a', 'Separado/a de hecho o anulado/a', 'Divorciado/a') = 'Sin pareja';
c('Conviviente', 'Soltero/a') = 'Con pareja';
c('No aplica', 'No sabe', 'No responde') = NA")),
ing_medio = forcats::as_factor(ifelse(ing_t_t >= mean(ing_t_t), 1, 0))) %>%
na.omit(.)
data_p$ing_medio <- set_label(data_p$ing_medio, '¿Mayor que el ingreso medio?')
class(data_p$ing_medio)
saveRDS(data_p, 'input/data/data_proc.rds')
pacman::p_load(sjPlot,
tidyverse,
srvyr,
survey,
remotes)
datos <- readRDS("input/data/data_proc.rds")
modelo0_sin <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
summary(modelo0_sin)
modelo1 <- glm(ing_medio ~ edad,
data = datos,
family = 'binomial')
summary(modelo1)
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
family = 'binomial')
summary(modelo2)
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
family = 'binomial')
summary(modelo3)
modelo3_dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
summary(modelo3_dis)
esi_design <- as_survey_design(datos,
ids = 1,
weights = fact_cal_esi)
modelo3_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'binomial',
design = esi_design)
summary(modelo3_survey)
modelo3_survey_q <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'quasibinomial',
design = esi_design)
summary(modelo3_survey_q); summary(modelo3_survey)
modelo3$coefficients
modelo3$coefficients[6]
modelo3$coefficients["est_conyugalSin pareja"]
summary(modelo3_survey)$deviance
summary(modelo3_survey)$aic
modelo3_survey$fitted.values
get_model_data(modelo3_survey,
type = "pred")
str(datos)
sjPlot::tab_model(modelo0,
show.ci=FALSE,
df.method = 'wald', #Para realizar más rápidamente el cálculo de los intervalos de confianza
encoding = "UTF-8")
modelo1_sin <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
modelo0 <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
sjPlot::tab_model(modelo0,
show.ci=FALSE,
df.method = 'wald', #Para realizar más rápidamente el cálculo de los intervalos de confianza
encoding = "UTF-8")
sjPlot::tab_model(modelo0,
show.ci=FALSE,
df.method = 'wald', #Para realizar más rápidamente el cálculo de los intervalos de confianza
encoding = "latin9")
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "latin9")
?tab_model
sjPlot::tab_model(modelo3, # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "latin9")
sjPlot::tab_model(list(modelo0, modelo1, modelo2), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "latin9")
sjPlot::tab_model(modelo3, # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "latin9")
sjPlot::tab_model(modelo3, # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::plot_model(modelo5,
show.p = T,
show.values =  T,
ci.lvl = c(0.95),
title = "Estimación de predictores",
vline.color = "purple")
sjPlot::plot_model(modelo3,
show.p = T,
show.values =  T,
ci.lvl = c(0.95),
title = "Estimación de predictores",
vline.color = "purple")
sjPlot::plot_model(modelo3,
show.p = T,
transform = 'exp',
show.values =  T,
ci.lvl = c(0.95),
title = "Estimación de predictores",
vline.color = "purple")
sjPlot::plot_model(modelo3,
show.p = T,
show.values =  T,
ci.lvl = c(0.95),
title = "Estimación de predictores",
vline.color = "purple")
sjPlot::plot_model(modelo3,
show.p = T,
show.values =  T,
ci.lvl = c(0.95),
title = "Estimación de predictores",
vline.color = "green")
?plot_model
sjPlot::plot_model(modelo3,
show.p = T,
show.values =  T,
ci.lvl = 0.95,
title = "Estimación de predictores",
axis.lim = 102000,
vline.color = "green")
sjPlot::plot_model(modelo3,
show.p = T,
show.values =  T,
ci.lvl = 0.95,
title = "Estimación de predictores",
axis.lim = [-4:102000],
vline.color = "green")
sjPlot::plot_model(modelo3,
show.p = T,
show.values =  T,
ci.lvl = 0.95,
title = "Estimación de predictores",
axis.lim = c(-4, 102000),
vline.color = "green")
htmlreg(modelo3)
remotes::install_github("leifeld/texreg", force = T)
pacman::p_load(sjPlot,
tidyverse,
srvyr,
survey,
remotes,
texreg)
datos <- readRDS("input/data/data_proc.rds")
modelo0 <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
modelo1 <- glm(ing_medio ~ edad,
data = datos,
family = 'binomial')
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
family = 'binomial')
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
family = 'binomial')
modelo3_dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
esi_design <- as_survey_design(datos,
ids = 1,
weights = fact_cal_esi)
modelo3_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'binomial',
design = esi_design)
modelo3_survey_q <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'quasibinomial',
design = esi_design)
htmlreg(modelo3)
pacman::p_load(sjPlot,
tidyverse,
srvyr,
survey,
remotes,
texreg)
datos <- readRDS("input/data/data_proc.rds")
modelo0 <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
modelo1 <- glm(ing_medio ~ edad,
data = datos,
family = 'binomial')
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
family = 'binomial')
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
family = 'binomial')
modelo3_dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
esi_design <- as_survey_design(datos,
ids = 1,
weights = fact_cal_esi)
modelo3_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'binomial',
design = esi_design)
modelo3_survey_q <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'quasibinomial',
design = esi_design)
sjPlot::tab_model(modelo3_survey, # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "latin9")
sjPlot::tab_model(modelo3_survey, # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::tab_model(list(modelo3, modelo3_survey), # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::tab_model(list(modelo3, modelo3_survey), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
dv.labels = c("Sin diseño muestral", "Con diseño muestral"), # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::tab_model(list(modelo3, modelo3_survey), # los modelos estimados
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
p.style = "stars", # asteriscos de significación estadística
dv.labels = c("Sin diseño muestral", "Con diseño muestral"), # etiquetas de modelos o variables dep.
df_method="wald",
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "UTF-8")
sjPlot::tab_model(modelo3, # modelo con todas las variables
show.ci=FALSE, # no mostrar intervalo de confianza (por defecto lo hace)
transform = 'exp', # exponenciamos los coeficientes
p.style = "stars", # asteriscos de significación estadística
df.method = 'wald',
dv.labels = "Modelo con todas las variables", # etiquetas de modelos o variables dep.
string.pred = "Predictores", string.est = "β", # nombre predictores y símbolo beta en tabla
encoding =  "latin9")
?htmlreg
htmlreg(modelo3, modelo3_survey)
htmlreg(list(modelo3, modelo3_survey))
screenreg(list(modelo3, modelo3_survey))
pacman::p_load(sjPlot,
tidyverse,
srvyr,
survey,
remotes,
texreg)
datos <- readRDS("input/data/data_proc.rds")
modelo0 <- glm(ing_medio ~ 1,
data = datos,
family = 'binomial')
modelo1 <- glm(ing_medio ~ edad,
data = datos,
family = 'binomial')
modelo2 <- glm(ing_medio ~ sexo,
data = datos,
family = 'binomial')
modelo3 <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
family = 'binomial')
modelo3_dis <- glm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
data = datos,
weights = fact_cal_esi,
family = 'binomial')
esi_design <- as_survey_design(datos,
ids = 1,
weights = fact_cal_esi)
modelo3_survey <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'binomial',
design = esi_design)
modelo3_survey_q <- svyglm(ing_medio ~ edad + sexo + ciuo08 + est_conyugal,
family = 'quasibinomial',
design = esi_design)
screenreg(list(modelo3, modelo3_survey))
or <- texreg::extract(modelo3_survey)
or@coef <- exp(or@coef)
screenreg(l = list(modelo3_survey, or), doctype = F,caption = "",caption.above = T,
custom.model.names = c("Modelo 3", "Modelo 3 (OR)"),
custom.coef.names = coef.labs,
ci.force = c(TRUE,TRUE),
override.coef = list(coef(modelo3_survey),or@coef),
custom.gof.rows=list("Deviance Test ($p$)" = c(test.pvalues3,
test.pvalues3),
"Pseudo R2" = c(mfr2.03,mfr2.03)),
custom.note = "$^{***}$ p < 0.001; $^{**}$ p < 0.01; $^{*}$ p < 0.05 <br> Errores estándar entre paréntesis. <br> **Nota**: La significancia estadística de los coeficientes en unidades de Odds ratio está calculada en base a los valores $t$, <br> los cuales a su vez se calculan en base a $log(Odds)/SE$")
custom.note = "$^{***}$ p < 0.001; $^{**}$ p < 0.01; $^{*}$ p < 0.05 <br> Errores estándar entre paréntesis. <br> **Nota**: La significancia estadística de los coeficientes en unidades de Odds ratio está calculada en base a los valores $t$, <br> los cuales a su vez se calculan en base a $log(Odds)/SE$")
screenreg(l = list(modelo3_survey, or), doctype = F,caption = "",caption.above = T,
custom.model.names = c("Modelo 3", "Modelo 3 (OR)"),
custom.coef.names = coef.labs,
ci.force = c(TRUE,TRUE),
override.coef = list(coef(modelo3_survey),or@coef),
custom.note = "$^{***}$ p < 0.001; $^{**}$ p < 0.01; $^{*}$ p < 0.05 <br> Errores estándar entre paréntesis. <br> **Nota**: La significancia estadística de los coeficientes en unidades de Odds ratio está calculada en base a los valores $t$, <br> los cuales a su vez se calculan en base a $log(Odds)/SE$")
screenreg(l = list(modelo3_survey, or), doctype = F,caption = "",caption.above = T,
custom.model.names = c("Modelo 3", "Modelo 3 (OR)"),
ci.force = c(TRUE,TRUE),
override.coef = list(coef(modelo3_survey),or@coef),
custom.note = "$^{***}$ p < 0.001; $^{**}$ p < 0.01; $^{*}$ p < 0.05 <br> Errores estándar entre paréntesis. <br> **Nota**: La significancia estadística de los coeficientes en unidades de Odds ratio está calculada en base a los valores $t$, <br> los cuales a su vez se calculan en base a $log(Odds)/SE$")
?htmlreg
?texreg::htmlreg
?texreg::htmlreg
View(or)
![](https://github.com/learn-R/slides/raw/main/img/01/flow-rproject.png)
